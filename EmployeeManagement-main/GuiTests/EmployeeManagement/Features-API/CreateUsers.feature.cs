// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmployeeManagement.Features_API
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API Test suite")]
    public partial class APITestSuiteFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CreateUsers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features-API", "API Test suite", "As a user I want to test the API\'s for employee managment application", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01_Create employee in application using api post method and delete the same")]
        [NUnit.Framework.CategoryAttribute("apitest")]
        public virtual void _01_CreateEmployeeInApplicationUsingApiPostMethodAndDeleteTheSame()
        {
            string[] tagsOfScenario = new string[] {
                    "apitest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01_Create employee in application using api post method and delete the same", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table1.AddRow(new string[] {
                            "email",
                            "jwick66@gmail.com"});
                table1.AddRow(new string[] {
                            "status",
                            "inactive"});
#line 7
testRunner.Given("I load addemployee.json api request file and input below parameters", ((string)(null)), table1, "Given ");
#line hidden
#line 11
testRunner.When("I execute post api request for addemployee functionality and validate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
testRunner.When("I execute delete api request for deleteemployee functionality and validate respon" +
                        "se", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02_Create employee in application using api post method and delete")]
        [NUnit.Framework.CategoryAttribute("apitest")]
        [NUnit.Framework.TestCaseAttribute("sreenathsm5007@gmail.com", "inactive", null)]
        [NUnit.Framework.TestCaseAttribute("john.doe@example.com", "active", null)]
        [NUnit.Framework.TestCaseAttribute("jane.smith@example.com", "inactive", null)]
        [NUnit.Framework.TestCaseAttribute("test.user@example.com", "active", null)]
        public virtual void _02_CreateEmployeeInApplicationUsingApiPostMethodAndDelete(string email, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "apitest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02_Create employee in application using api post method and delete", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table2.AddRow(new string[] {
                            "email",
                            string.Format("{0}", email)});
                table2.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status)});
#line 16
testRunner.Given("I load addemployee.json api request file and input below parameters", ((string)(null)), table2, "Given ");
#line hidden
#line 20
testRunner.When("I execute post api request for addemployee functionality and validate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
testRunner.When("I execute delete api request for deleteemployee functionality and validate respon" +
                        "se", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03_Create more employees in application and get all employees list")]
        [NUnit.Framework.CategoryAttribute("apitest")]
        [NUnit.Framework.TestCaseAttribute("Dichu", "Deeshma6@gmail.com", "Female", "Active", "PAN", "Foxtrot", "135000", null)]
        [NUnit.Framework.TestCaseAttribute("Sreenath", "SMitrasenan06@gmail.com", "Male", "Active", "PAN", "Omega", "17500", null)]
        [NUnit.Framework.TestCaseAttribute("Amjed", "Amjed4u@gmail.com", "Male", "Active", "PAN", "Sigma", "10500", null)]
        public virtual void _03_CreateMoreEmployeesInApplicationAndGetAllEmployeesList(string name, string email, string gender, string status, string proofsubmitted, string department, string salary, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "apitest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("gender", gender);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("proofsubmitted", proofsubmitted);
            argumentsOfScenario.Add("department", department);
            argumentsOfScenario.Add("salary", salary);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_Create more employees in application and get all employees list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table3.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name)});
                table3.AddRow(new string[] {
                            "email",
                            string.Format("{0}", email)});
                table3.AddRow(new string[] {
                            "gender",
                            string.Format("{0}", gender)});
                table3.AddRow(new string[] {
                            "status",
                            string.Format("{0}", status)});
                table3.AddRow(new string[] {
                            "proofsubmitted",
                            string.Format("{0}", proofsubmitted)});
                table3.AddRow(new string[] {
                            "department",
                            string.Format("{0}", department)});
                table3.AddRow(new string[] {
                            "salary",
                            string.Format("{0}", salary)});
#line 31
testRunner.Given("I load addemployee.json api request file and input below parameters", ((string)(null)), table3, "Given ");
#line hidden
#line 40
testRunner.When("I execute post api request for addemployee functionality and validate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
testRunner.When("I execute getallusers api request for getallexistingusers functionality and valid" +
                        "ate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
testRunner.When("I execute delete api request for deleteemployee functionality and validate respon" +
                        "se", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04_Execute complete workflow using create, get, update, getall and delete users")]
        [NUnit.Framework.TestCaseAttribute("Poman", "Poman6@gmail.com", null)]
        public virtual void _04_ExecuteCompleteWorkflowUsingCreateGetUpdateGetallAndDeleteUsers(string name, string email, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("email", email);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04_Execute complete workflow using create, get, update, getall and delete users", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
testRunner.Given("I load addemployee.json request file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
testRunner.When("I execute post api request for addemployee functionality and validate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
testRunner.Then("I execute get api request for fetchuserdetail functionality and validate response" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table4.AddRow(new string[] {
                            "name",
                            string.Format("{0}", name)});
                table4.AddRow(new string[] {
                            "email",
                            string.Format("{0}", email)});
#line 53
testRunner.Given("I load addemployee.json api request file and input below parameters", ((string)(null)), table4, "Given ");
#line hidden
#line 57
testRunner.Then("I execute update api request for update functionality and validate response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
testRunner.When("I execute delete api request for deleteemployee functionality and validate respon" +
                        "se", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
